// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0

import type {Address} from '@solana/addresses';
import {TransactionVersion} from '@solana/kit';
import type {
  TransactionForFullJson,
  UnixTimestamp,
  Blockhash,
  Slot,
  Base58EncodedBytes,
  Lamports,
  TransactionError,
  TransactionStatus,
  TokenBalance,
  Reward,
  Base64EncodedDataResponse,
} from '@solana/rpc-types';
import type {BlockFilter} from '@subql/types-core';

type AddressTableLookup = Readonly<{
  /** public key for an address lookup table account. */
  accountKey: Address;
  /** List of indices used to load addresses of readonly accounts from a lookup table. */
  readonlyIndexes: readonly number[];
  /** List of indices used to load addresses of writable accounts from a lookup table. */
  writableIndexes: readonly number[];
}>;

type TransactionForFullMetaLoadedAddresses = Readonly<{
  /** Addresses loaded from lookup tables */
  loadedAddresses: {
    readonly: readonly Address[];
    writable: readonly Address[];
  };
}>;

type TransactionForFullTransactionAddressTableLookups = Readonly<{
  message: {
    addressTableLookups?: readonly AddressTableLookup[] | null;
  };
}>;

type TransactionForFullTransactionJsonBase = Readonly<{
  message: {
    accountKeys: readonly Address[];
    header: {
      numReadonlySignedAccounts: number;
      numReadonlyUnsignedAccounts: number;
      numRequiredSignatures: number;
    };
    instructions: readonly SolanaInstruction[];
    recentBlockhash: Blockhash;
  };
  signatures: readonly Base58EncodedBytes[];
}>;

type ReturnData = {
  /** the return data itself */
  data: Base64EncodedDataResponse;
  /** the program that generated the return data */
  programId: Address;
};

export type DecodedData<T = any> = {
  name: string;
  data: T;
};

export type SolanaLogMessage<T = any> = {
  /** The raw log message **/
  message: string;
  /** A promise for the decoded message. This will be lazily evaluated unless it is matched by a datasource filter then it will resolve instantly */
  decodedMessage: Promise<DecodedData<T> | null>;
  /** The program address that emitted the message */
  programId: string;
  /** The original index of the unparsed log */
  logIndex: number;

  type: 'log' | 'data' | 'other';
};

type TransactionForFullMetaBase = Readonly<{
  /** number of compute units consumed by the transaction */
  computeUnitsConsumed?: bigint;
  /** Error if transaction failed, null if transaction succeeded. */
  err: TransactionError | null;
  /** fee this transaction was charged */
  fee: Lamports;
  /** parsed log messages, can be null if log recording was not enabled for the message. */
  logs: SolanaLogMessage[] | null;
  /** array of account balances after the transaction was processed */
  postBalances: readonly Lamports[];
  /** List of token balances from after the transaction was processed or omitted if token balance recording was not yet enabled during this transaction */
  postTokenBalances?: readonly TokenBalance[];
  /** array of account balances from before the transaction was processed */
  preBalances: readonly Lamports[];
  /** List of token balances from before the transaction was processed or omitted if token balance recording was not yet enabled during this transaction */
  preTokenBalances?: readonly TokenBalance[];
  /** the most-recent return data generated by an instruction in the transaction */
  returnData?: ReturnData;
  /** transaction-level rewards */
  rewards: readonly Reward[] | null;
  /**
   * Transaction status
   * @deprecated
   */
  status: TransactionStatus;
}>;

// type TransactionForFullMetaLoadedAddresses = Readonly<{
//     /** Addresses loaded from lookup tables */
//     loadedAddresses: {
//         readonly: readonly Address[];
//         writable: readonly Address[];
//     };
// }>;

export type TransactionForFullMetaInnerInstructionsUnparsed = Readonly<{
  innerInstructions: readonly Readonly<{
    /** The index of the instruction in the transaction */
    index: number;
    /** The instruction */
    instructions: readonly SolanaInstruction[];
  }>[];
}>;

export type SolanaTransaction = {
  meta:
    | (TransactionForFullMetaBase &
        TransactionForFullMetaInnerInstructionsUnparsed &
        TransactionForFullMetaLoadedAddresses)
    | null;
  transaction: TransactionForFullTransactionAddressTableLookups & TransactionForFullTransactionJsonBase;
  version: TransactionVersion;
  block: BaseSolanaBlock;
};

export type SolanaInstruction<T = any> = Readonly<{
  /** The index of the instruction within the transaction.
   * If it is an inner transaction then the index is prefixed by the index of the outer instruction
   * @example [3, 1] The 2nd inner instruction for the 4rd instruction */
  index: number[];
  accounts: readonly number[];
  /* The raw instruction data, in base58 encoding */
  data: Base58EncodedBytes;
  /** A promise for the decoded message. This will be lazily evaluated unless it is matched by a datasource filter then it will resolve instantly */
  decodedData: Promise<DecodedData<T> | null>;
  programIdIndex: number;
  stackHeight?: number;

  // Variation from the original @solana/rpc-types to allow linking back to the transaction
  // Use the original pacakge type here so we dont have a circular reference beyond Tx -> Inst -> Tx
  transaction: TransactionForFullJson<0>;
  block: BaseSolanaBlock;
}>;

export type BaseSolanaBlock = Readonly<{
  // From GetBlockApiResponseBase
  /** The number of blocks beneath this block */
  blockHeight: bigint;
  /** Estimated production time, as Unix timestamp */
  blockTime: UnixTimestamp;
  /** the blockhash of this block */
  blockhash: Blockhash;
  /** The slot index of this block's parent */
  parentSlot: Slot;
  /** The blockhash of this block's parent */
  previousBlockhash: Blockhash;
}>;

// Extracted equivalent https://github.com/anza-xyz/kit/blob/main/packages/rpc-api/src/getBlock.ts#L285
export type SolanaBlock = Readonly<
  BaseSolanaBlock & {
    // From GetBlockApiResponseWithTransactions
    transactions: readonly SolanaTransaction[];
  }
>;

export type SolanaBlockFilter = BlockFilter;

/**
 * Represents a filter for Solana Transactions
 * @interface
 * @extends {SolanaTransactionFilter}
 */
export interface SolanaTransactionFilter {
  // TODO could this be multiple addresses?
  /**
   *  The account key of the transaction signer.
   * */
  signerAccountKey?: string;
}

export type InstructionAccountFilter = null | string[];

/**
 * Represents a filter for Solana instructions
 * @interface
 * @extends {SolanaInstructionFilter}
 */
export interface SolanaInstructionFilter {
  /**
   * The account key of the program that is interacted with.
   * @example
   * programId: "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4"
   * */
  programId?: string;

  /**
   * The discriminator of the instruction data. This can be in hex, base58 or an Anchor program function name
   * @example
   * discriminator: "claim_token"
   * @example
   * discriminator: "74ce1bbfa6130049"
   * */
  discriminator?: string;

  /**
   * Instruction accounts by their index, null to skip that index or an array of addresses to match one of. This is limited to the first 16 accounts for performance optimisations.
   * @example
   * accounts: [null, null, ["GnjWvvFY1ZhWj5wJSZBxcpP6PqYmdXFaGgdgFKKYoZ1V"]] // Match instructions where the 3rd account is "GnjWvvFY1ZhWj5wJSZBxcpP6PqYmdXFaGgdgFKKYoZ1V"
   * */
  accounts?: [
    InstructionAccountFilter,
    InstructionAccountFilter?,
    InstructionAccountFilter?,
    InstructionAccountFilter?,
    InstructionAccountFilter?,
    InstructionAccountFilter?,
    InstructionAccountFilter?,
    InstructionAccountFilter?,
    InstructionAccountFilter?,
    InstructionAccountFilter?,
    InstructionAccountFilter?,
    InstructionAccountFilter?,
    InstructionAccountFilter?,
    InstructionAccountFilter?,
    InstructionAccountFilter?,
    InstructionAccountFilter?
  ];

  /* Include failed instructions. By default failed instructions are not included */
  includeFailed?: boolean;
}

/**
 * Represents a filter for Solana logs
 * @interface
 * @extends {SolanaLogFilter}
 */
export interface SolanaLogFilter {
  /**
   * The account key of the program that is interacted with.
   * @example
   * programId: "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4"
   * */
  programId?: string;
}
